---
import { REDIS_URL, REDIS_PASS } from "astro:env/server";
import { Redis } from "@upstash/redis";
import { checkIsViewed } from "../utils/has-viewed";

type Props = {
  postId: string;
};

const { postId } = Astro.props;

const viewedCookie = Astro.cookies.get("blogView" + postId);
const clientIP = Astro.clientAddress;

const oneWeek = 60 * 60 * 24 * 7;
const blogViewKey = `blog:views:${postId}:viewed:${clientIP}`;
const hasViewedCookie = viewedCookie?.value === "1";

const redisClient = new Redis({
  url: REDIS_URL,
  token: REDIS_PASS
});

const isViewed = checkIsViewed({
  hasViewedCookie,
  redisClient,
  viewKey: blogViewKey
});

if (!isViewed) {
  await redisClient.incr(`blog:views:${postId}`);
  await redisClient.set(blogViewKey, "1", {
    ex: oneWeek
  });
}

Astro.cookies.set("blogView" + postId, "1", {
  maxAge: oneWeek,
  httpOnly: true,
  sameSite: "strict",
  secure: import.meta.env.NODE_ENV === "development" ? false : true
});

const views = Number(await redisClient.get(`blog:views:${postId}`));

const formatter = new Intl.NumberFormat("pl-PL", {
  notation: "compact"
});

const formattedViews = formatter.format(views);
---

<span title={`WyÅ›wietlenia: ${views}`}>
  |
  <span class="inline-flex items-center justify-center gap-2 align-bottom">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="16"
      height="16"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="lucide lucide-eye"
      ><path
        d="M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0"
      ></path><circle cx="12" cy="12" r="3"></circle></svg
    >
    {formattedViews}
  </span>
</span>
