---
import { REDIS_URL, REDIS_PASS } from "astro:env/server";
import { Redis } from "@upstash/redis";
import { isbot } from "isbot";

type Props = {
  postId: string;
};

const { postId } = Astro.props;

const isBot = isbot(Astro.request.headers.get("user-agent"));

const clientIP = Astro.clientAddress;
const blogViewKey = `blog:views:${postId}:viewed:${clientIP}`;

const redisClient = new Redis({
  url: REDIS_URL,
  token: REDIS_PASS
});

const viewedCookie = Astro.cookies.get("blogView" + postId);

const hasViewedCookie = viewedCookie?.value === "true";

const hasViewed = hasViewedCookie
  ? true
  : await redisClient.get<boolean>(blogViewKey);

const isDevIp = clientIP === "127.0.0.1";

const ONE_DAY = 60 * 60 * 24;

if (!isBot && !hasViewed && !isDevIp) {
  await redisClient.incr(`blog:views:${postId}`);
  await redisClient.set(blogViewKey, "true", {
    ex: ONE_DAY
  });
}

Astro.cookies.set("blogView-" + postId, "true", {
  maxAge: ONE_DAY,
  httpOnly: true,
  sameSite: "strict",
  secure: import.meta.env.NODE_ENV === "development" ? false : true
});

const views = Number(await redisClient.get(`blog:views:${postId}`));

const formatter = new Intl.NumberFormat("pl-PL", {
  notation: "compact"
});

const formattedViews = formatter.format(views);
---

<span title={`WyÅ›wietlenia: ${views}`} data-views>
  |
  <span class="inline-flex items-center justify-start gap-2 align-bottom">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="16"
      height="16"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="lucide lucide-eye"
      ><path
        d="M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0"
      ></path><circle cx="12" cy="12" r="3"></circle></svg
    >
    {formattedViews}
  </span>
</span>

<style>
  [data-views] {
    animation: views 0.2s forwards;
  }

  @keyframes views {
    0% {
      filter: blur(10px);
      opacity: 0;
    }
    100% {
      filter: blur(0px);
      opacity: 1;
    }
  }
</style>
